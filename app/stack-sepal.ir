{:package "woodenlist",
 :files {"comp.message-list" {:ns ["ns"
                                   "woodenlist.comp.message-list"
                                   [":require"
                                    ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                    ["[]" "respo-ui.style" ":as" "ui"]
                                    ["[]" "respo-ui.style.colors" ":as" "colors"]
                                    ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img"]]
                                    ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                    ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                    ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                    ["[]" "woodenlist.comp.speaker" ":refer" ["[]" "comp-speaker"]]
                                    ["[]" "woodenlist.comp.message" ":refer" ["[]" "comp-message"]]]],
                              :defs {"comp-message-list" ["def"
                                                          "comp-message-list"
                                                          ["create-comp"
                                                           ":message-list"
                                                           ["fn"
                                                            ["messages"]
                                                            ["fn"
                                                             ["state" "mutate!"]
                                                             ["div"
                                                              ["{}"]
                                                              ["div"
                                                               ["{}"]
                                                               ["comp-text" "|Messages(cleared automatically...)" "nil"]]
                                                              ["comp-space" "nil" "16"]
                                                              ["div"
                                                               ["{}"]
                                                               ["->>"
                                                                ["vals" "messages"]
                                                                ["sort-by" ":time"]
                                                                ["map"
                                                                 ["fn"
                                                                  ["message"]
                                                                  ["[]"
                                                                   [":id" "message"]
                                                                   ["div" ["{}"] ["comp-message" "message"]]]]]]]
                                                              ["comp-speaker"]]]]]]},
                              :procs []},
         "comp.people" {:ns ["ns"
                             "woodenlist.comp.people"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                              ["[]" "woodenlist.comp.member-card" ":refer" ["[]" "comp-member-card"]]]],
                        :defs {"style-list" ["def" "style-list" ["{}" [":flex-wrap" ":wrap"]]],
                               "style-title" ["def"
                                              "style-title"
                                              ["{}"
                                               [":font-family" "|Josefin Sans"]
                                               [":font-size" "20"]
                                               [":font-weight" "100"]]],
                               "render" ["defn"
                                         "render"
                                         ["members"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["div"
                                           ["{}"]
                                           ["div" ["{}" [":style" "style-title"]] ["comp-text" "|People" "nil"]]
                                           ["comp-space" "nil" "16"]
                                           ["div"
                                            ["{}" [":style" ["merge" "ui/row" "style-list"]]]
                                            ["->>"
                                             ["vals" "members"]
                                             ["map" ["fn" ["user"] ["[]" [":id" "user"] ["comp-member-card" "user"]]]]]]]]],
                               "comp-people" ["def" "comp-people" ["create-comp" ":people" "render"]]},
                        :procs []},
         "comp.portal" {:ns ["ns"
                             "woodenlist.comp.portal"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                              ["[]" "woodenlist.comp.group-card" ":refer" ["[]" "comp-group-card"]]
                              ["[]" "woodenlist.comp.creator" ":refer" ["[]" "comp-creator"]]]],
                        :defs {"style-group-list" ["def"
                                                   "style-group-list"
                                                   ["{}" [":flex-wrap" ":wrap"] [":cursor" ":pointer"]]],
                               "comp-portal" ["def" "comp-portal" ["create-comp" ":portal" "render"]],
                               "render" ["defn"
                                         "render"
                                         ["task-groups"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["div"
                                           ["{}"]
                                           ["comp-creator"]
                                           ["comp-space" "nil" "32"]
                                           ["div"
                                            ["{}" [":style" ["merge" "ui/row" "style-group-list"]]]
                                            ["->>"
                                             ["vals" "task-groups"]
                                             ["map"
                                              ["fn"
                                               ["task-group"]
                                               ["[]" [":id" "task-group"] ["comp-group-card" "task-group"]]]]]]]]]},
                        :procs []},
         "comp.member-card" {:ns ["ns"
                                  "woodenlist.comp.member-card"
                                  [":require"
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "respo-ui.style.colors" ":as" "colors"]
                                   ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img"]]
                                   ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                             :defs {"style-avatar" ["def"
                                                    "style-avatar"
                                                    ["{}"
                                                     [":width" "32"]
                                                     [":height" "32"]
                                                     [":border-radius" "|50%"]
                                                     [":cursor" ":pointer"]]],
                                    "on-change-role" ["defn"
                                                      "on-change-role"
                                                      ["group-id" "user-id" "admin?"]
                                                      ["fn"
                                                       ["e" "dispatch!"]
                                                       ["dispatch!"
                                                        ":task-group/change-role"
                                                        ["{}"
                                                         [":group-id" "group-id"]
                                                         [":user-id" "user-id"]
                                                         [":admin?" "admin?"]]]]],
                                    "on-delete" ["defn"
                                                 "on-delete"
                                                 ["group-id" "user-id"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["dispatch!"
                                                   ":task-group/delete-member"
                                                   ["{}" [":group-id" "group-id"] [":user-id" "user-id"]]]]],
                                    "render" ["defn"
                                              "render"
                                              ["member" "admin?" "group-id" "user-id" "by-admin?"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["div"
                                                ["{}" [":style" ["merge" "ui/row" "style-container"]]]
                                                ["img"
                                                 ["{}"
                                                  [":attrs" ["{}" [":src" [":avatar" "member"]]]]
                                                  [":style" "style-avatar"]
                                                  [":event" ["{}" [":click" ["on-view-member" [":id" "member"]]]]]]]
                                                ["comp-space" "8" "nil"]
                                                ["comp-text" [":name" "member"] "nil"]
                                                ["comp-space" "16" "nil"]
                                                ["if"
                                                 ["and" "by-admin?" ["not=" "user-id" [":id" "member"]]]
                                                 ["div"
                                                  ["{}"]
                                                  ["span"
                                                   ["{}"
                                                    [":attrs" ["{}" [":class-name" "|icon ion-md-remove-circle"]]]
                                                    [":event"
                                                     ["{}" [":click" ["on-delete" "group-id" [":id" "member"]]]]]
                                                    [":style" "style-icon"]]]
                                                  ["comp-space" "16" "nil"]
                                                  ["span"
                                                   ["{}"
                                                    [":attrs" ["{}" [":class-name" "|icon ion-md-build"]]]
                                                    [":style" "style-icon"]
                                                    [":event"
                                                     ["{}"
                                                      [":click" ["on-change-role" "group-id" [":id" "member"] "admin?"]]]]]]]]]]],
                                    "style-container" ["def"
                                                       "style-container"
                                                       ["{}"
                                                        [":color" "colors/texture-light"]
                                                        [":min-width" "120"]
                                                        [":height" "48"]
                                                        [":margin-right" "16"]
                                                        [":margin-bottom" "16"]
                                                        [":padding" "|0 16px"]
                                                        [":font-size" "16"]
                                                        [":box-shadow" ["str" "|0 0 1px " "colors/warm"]]
                                                        [":align-items" ":center"]
                                                        [":background-color" ":white"]]],
                                    "on-view-member" ["defn"
                                                      "on-view-member"
                                                      ["user-id"]
                                                      ["fn"
                                                       ["e" "dispatch!"]
                                                       ["dispatch!"
                                                        ":router/change"
                                                        ["{}" [":name" ":person"] [":params" "user-id"]]]]],
                                    "style-icon" ["def" "style-icon" ["{}" [":cursor" ":pointer"]]],
                                    "comp-member-card" ["def"
                                                        "comp-member-card"
                                                        ["create-comp" ":member-card" "render"]]},
                             :procs []},
         "comp.profile" {:ns ["ns"
                              "woodenlist.comp.profile"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "a" "input"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                               ["[]" "woodenlist.schema" ":as" "schema"]]],
                         :defs {"on-change-avatar" ["defn"
                                                    "on-change-avatar"
                                                    ["e" "dispatch!"]
                                                    ["dispatch!"
                                                     ":router/change"
                                                     ["{}" [":name" ":edit-avatar"] [":params" "nil"]]]],
                                "on-log-out" ["defn"
                                              "on-log-out"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":user/log-out" "nil"]
                                              [".removeItem" "js/localStorage" [":storage-key" "schema/configs"]]],
                                "style-container" ["def" "style-container" ["{}" [":color" "colors/paper"]]],
                                "style-avatar" ["def"
                                                "style-avatar"
                                                ["{}"
                                                 [":width" "80"]
                                                 [":height" "80"]
                                                 [":border-radius" "|50%"]
                                                 [":position" ":relative"]
                                                 [":background-size" ":cover"]]],
                                "comp-profile" ["def" "comp-profile" ["create-comp" ":profile" "render"]],
                                "style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":font-size" "14"]
                                                  [":cursor" ":pointer"]
                                                  [":background-color" "colors/motif-light"]
                                                  [":color" ":white"]
                                                  [":padding" "|0 8px"]]],
                                "style-edit" ["def"
                                              "style-edit"
                                              ["{}"
                                               [":position" ":absolute"]
                                               [":bottom" "0"]
                                               [":right" "0"]
                                               [":background-color" "colors/motif"]
                                               [":border-radius" "|50%"]
                                               [":width" "24"]
                                               [":height" "24"]
                                               [":font-size" "16"]
                                               [":cursor" ":pointer"]]],
                                "render" ["defn"
                                          "render"
                                          ["user"]
                                          ["fn"
                                           ["state" "mutate!"]
                                           ["div"
                                            ["{}" [":style" "style-container"]]
                                            ["div"
                                             ["{}"]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "style-avatar"
                                                 ["{}" [":background-image" ["str" "|url(" [":avatar" "user"] "|)"]]]]]]
                                              ["div"
                                               ["{}"
                                                [":style" ["merge" "ui/center" "style-edit"]]
                                                [":event" ["{}" [":click" "on-change-avatar"]]]]
                                               ["a" ["{}" [":attrs" ["{}" [":class-name" "|icon ion-md-create"]]]]]]]]
                                            ["comp-space" "nil" "32"]
                                            ["div"
                                             ["{}" [":style" "ui/flex"]]
                                             ["comp-text" ["str" "|Hello! " [":name" "user"]] "nil"]]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|User id:" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["input"
                                              ["{}" [":attrs" ["{}" [":value" [":id" "user"]]]] [":style" "ui/input"]]
                                              "nil"]]
                                            ["comp-space" "nil" "16"]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|Want to feedback?"]
                                             ["comp-space" "8" "nil"]
                                             ["a"
                                              ["{}"
                                               [":attrs"
                                                ["{}"
                                                 [":href" "|https://github.com/Cumulo/woodenlist/issues"]
                                                 [":target" "|_blank"]
                                                 [":inner-text" "|Add an issue"]]]
                                               [":style" "ui/clickable-text"]]]]
                                            ["comp-space" "nil" "32"]
                                            ["div"
                                             ["{}"]
                                             ["a"
                                              ["{}"
                                               [":style" "style-trigger"]
                                               [":event" ["{}" [":click" "on-log-out"]]]]
                                              ["comp-text" "|Log out" "nil"]]]]]]},
                         :procs []},
         "comp.group-card" {:ns ["ns"
                                 "woodenlist.comp.group-card"
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "clojure.string" ":as" "string"]
                                  ["[]" "respo-ui.style" ":as" "ui"]
                                  ["[]" "respo-ui.style.colors" ":as" "colors"]
                                  ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input" "button"]]
                                  ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]]],
                            :defs {"style-container" ["def"
                                                      "style-container"
                                                      ["{}"
                                                       [":background-color" "colors/motif"]
                                                       [":line-height" "|40px"]
                                                       [":cursor" ":pointer"]
                                                       [":color" ":white"]
                                                       [":margin-right" "16"]
                                                       [":margin-bottom" "16"]
                                                       [":padding" "8"]
                                                       [":min-width" "80"]]],
                                   "on-route" ["defn"
                                               "on-route"
                                               ["group-id"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["dispatch!"
                                                 ":router/change"
                                                 ["{}" [":name" ":group"] [":params" "group-id"]]]]],
                                   "comp-group-card" ["def" "comp-group-card" ["create-comp" ":group-card" "render"]],
                                   "render" ["defn"
                                             "render"
                                             ["task-group"]
                                             ["fn"
                                              ["state" "mutate!"]
                                              ["div"
                                               ["{}"
                                                [":style" ["merge" "ui/center" "style-container"]]
                                                [":event" ["{}" [":click" ["on-route" [":id" "task-group"]]]]]]
                                               ["comp-text" [":name" "task-group"] "nil"]]]]},
                            :procs []},
         "comp.task-editor" {:ns ["ns"
                                  "woodenlist.comp.task-editor"
                                  [":require"
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "clojure.string" ":as" "string"]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "respo-ui.style.colors" ":as" "colors"]
                                   ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "a" "input" "button"]]
                                   ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                   ["[]" "woodenlist.comp.back" ":refer" ["[]" "comp-back"]]]],
                             :defs {"on-delete" ["defn"
                                                 "on-delete"
                                                 ["group-id" "task-id"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["dispatch!"
                                                   ":task/delete"
                                                   ["{}" [":group-id" "group-id"] [":task-id" "task-id"]]]]],
                                    "init-state" ["defn" "init-state" ["&" "args"] "|"],
                                    "on-submit" ["defn"
                                                 "on-submit"
                                                 ["group-id" "task-id" "state" "mutate!"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["if"
                                                   ["not" ["string/blank?" "state"]]
                                                   ["do"
                                                    ["mutate!" "|"]
                                                    ["dispatch!"
                                                     ":task/edit"
                                                     ["{}"
                                                      [":group-id" "group-id"]
                                                      [":task-id" "task-id"]
                                                      [":text" "state"]]]]]]],
                                    "on-input" ["defn"
                                                "on-input"
                                                ["mutate!"]
                                                ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                    "render" ["defn"
                                              "render"
                                              ["task"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["div"
                                                ["{}"]
                                                ["div" ["{}"] ["comp-text" [":text" "task"] "nil"]]
                                                ["div"
                                                 ["{}"]
                                                 ["input"
                                                  ["{}"
                                                   [":style" "ui/input"]
                                                   [":attrs" ["{}" [":value" "state"] [":placeholder" "|Task content"]]]
                                                   [":event" ["{}" [":input" ["on-input" "mutate!"]]]]]]
                                                 ["comp-space" "8" "nil"]
                                                 ["button"
                                                  ["{}"
                                                   [":style" "ui/button"]
                                                   [":event"
                                                    ["{}"
                                                     [":click"
                                                      ["on-submit"
                                                       [":group-id" "task"]
                                                       [":id" "task"]
                                                       "state"
                                                       "mutate!"]]]]]
                                                  ["comp-text" "|Submit" "nil"]]
                                                 ["comp-space" "8" "nil"]
                                                 ["button"
                                                  ["{}"
                                                   [":style"
                                                    ["merge"
                                                     "ui/button"
                                                     ["{}" [":background-color" "colors/irreversible"]]]]
                                                   [":event"
                                                    ["{}" [":click" ["on-delete" [":group-id" "task"] [":id" "task"]]]]]]
                                                  ["comp-text" "|Delete" "nil"]]
                                                 ["comp-space" "nil" "120"]
                                                 ["div" ["{}"] ["comp-back" [":group-id" "task"] "nil"]]]]]],
                                    "comp-task-editor" ["def"
                                                        "comp-task-editor"
                                                        ["create-comp"
                                                         ":task-editor"
                                                         "init-state"
                                                         "update-state"
                                                         "render"]],
                                    "update-state" ["defn" "update-state" ["state" "text"] "text"]},
                             :procs []},
         "comp.creator" {:ns ["ns"
                              "woodenlist.comp.creator"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                         :defs {"style-trigger" ["def"
                                                 "style-trigger"
                                                 ["{}"
                                                  [":color" "colors/motif"]
                                                  [":cursor" ":pointer"]
                                                  [":font-size" "32"]
                                                  [":display" ":inline-block"]
                                                  [":vertical-align" ":center"]]],
                                "init-state" ["defn" "init-state" [] "|"],
                                "on-create" ["defn"
                                             "on-create"
                                             ["text" "mutate!"]
                                             ["fn"
                                              ["e" "dispatch!"]
                                              ["dispatch!" ":task-group/create" "text"]
                                              ["mutate!" "|"]]],
                                "comp-creator" ["def"
                                                "comp-creator"
                                                ["create-comp"
                                                 ":creator"
                                                 "init-state"
                                                 "update-state"
                                                 ["fn"
                                                  []
                                                  ["fn"
                                                   ["state" "mutate!"]
                                                   ["div"
                                                    ["{}"]
                                                    ["div"
                                                     ["{}"]
                                                     ["input"
                                                      ["{}"
                                                       [":attrs"
                                                        ["{}" [":value" "state"] [":placeholder" "|Group name"]]]
                                                       [":event"
                                                        ["{}"
                                                         [":input" ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]]]]
                                                       [":style" "ui/input"]]]
                                                     ["comp-space" "8" "nil"]
                                                     ["div"
                                                      ["{}"
                                                       [":style" ["merge" "ui/center" "style-trigger"]]
                                                       [":event" ["{}" [":click" ["on-create" "state" "mutate!"]]]]]
                                                      ["span"
                                                       ["{}"
                                                        [":attrs" ["{}" [":class-name" "|icon ion-md-add-circle"]]]]]]]]]]]],
                                "update-state" ["defn" "update-state" ["state" "new-text"] "new-text"]},
                         :procs []},
         "comp.task" {:ns ["ns"
                           "woodenlist.comp.task"
                           [":require"
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo-ui.style" ":as" "ui"]
                            ["[]" "respo-ui.style.colors" ":as" "colors"]
                            ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                            ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]]],
                      :defs {"on-touch" ["defn"
                                         "on-touch"
                                         ["group-id" "task-id"]
                                         ["fn"
                                          ["e" "dispatch!"]
                                          ["dispatch!"
                                           ":task/touch"
                                           ["{}" [":group-id" "group-id"] [":task-id" "task-id"]]]]],
                             "style-container" ["def"
                                                "style-container"
                                                ["{}"
                                                 [":align-items" ":center"]
                                                 [":margin-top" "8"]
                                                 [":color" "colors/texture"]]],
                             "style-touch" ["def"
                                            "style-touch"
                                            ["{}"
                                             [":width" "40"]
                                             [":height" "40"]
                                             [":cursor" ":pointer"]
                                             [":background-color" "colors/verdant"]]],
                             "style-done" ["def"
                                           "style-done"
                                           ["{}"
                                            [":width" "40"]
                                            [":height" "40"]
                                            [":cursor" ":pointer"]
                                            [":background-color" "colors/attractive"]]],
                             "comp-task" ["def" "comp-task" ["create-comp" ":task" "render"]],
                             "render" ["defn"
                                       "render"
                                       ["task"]
                                       ["fn"
                                        ["state" "mutate!"]
                                        ["div"
                                         ["{}" [":style" ["merge" "ui/row" "style-container"]]]
                                         ["div"
                                          ["{}"
                                           [":style"
                                            ["merge"
                                             "style-done"
                                             ["if" [":done?" "task"] ["{}" [":background-color" "colors/verdant"]]]]]
                                           [":event"
                                            ["{}"
                                             [":click"
                                              ["on-toggle" [":group-id" "task"] [":id" "task"] [":done?" "task"]]]]]]]
                                         ["comp-space" "8" "nil"]
                                         ["div"
                                          ["{}"
                                           [":event" ["{}" [":click" ["on-edit" [":group-id" "task"] [":id" "task"]]]]]
                                           [":style" "style-text"]]
                                          ["comp-text" [":text" "task"] "nil"]]
                                         ["comp-space" "8" "nil"]
                                         ["div"
                                          ["{}"
                                           [":style" "style-touch"]
                                           [":attrs" ["{}" [":title" "|Touch"]]]
                                           [":event" ["{}" [":click" ["on-touch" [":group-id" "task"] [":id" "task"]]]]]]]]]],
                             "on-toggle" ["defn"
                                          "on-toggle"
                                          ["group-id" "task-id" "done?"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["dispatch!"
                                            ":task/toggle"
                                            ["{}" [":group-id" "group-id"] [":task-id" "task-id"] [":done?" "done?"]]]]],
                             "style-text" ["def"
                                           "style-text"
                                           ["{}"
                                            [":min-width" "400"]
                                            [":background-color" "colors/paper"]
                                            [":height" "40"]
                                            [":line-height" "|40px"]
                                            [":padding" "|0 8px"]
                                            [":cursor" ":pointer"]]],
                             "on-edit" ["defn"
                                        "on-edit"
                                        ["group-id" "task-id"]
                                        ["fn"
                                         ["e" "dispatch!"]
                                         ["dispatch!"
                                          ":router/change"
                                          ["{}"
                                           [":name" ":task-editor"]
                                           [":params" ["{}" [":group-id" "group-id"] [":task-id" "task-id"]]]]]]]},
                      :procs []},
         "comp.back" {:ns ["ns"
                           "woodenlist.comp.back"
                           [":require"
                            ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                            ["[]" "respo-ui.style" ":as" "ui"]
                            ["[]" "respo-ui.style.colors" ":as" "colors"]
                            ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                            ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                            ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                            ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]]],
                      :defs {"style-container" ["def"
                                                "style-container"
                                                ["{}"
                                                 [":background-color" "colors/paper"]
                                                 [":color" "colors/texture-light"]
                                                 [":display" ":inline-flex"]
                                                 [":width" "80"]
                                                 [":height" "32"]
                                                 [":cursor" ":pointer"]]],
                             "comp-back" ["def" "comp-back" ["create-comp" ":back" "render"]],
                             "render" ["defn"
                                       "render"
                                       ["group-id"]
                                       ["fn"
                                        ["state" "mutate!"]
                                        ["div"
                                         ["{}"
                                          [":style" ["merge" "ui/center" "style-container"]]
                                          [":event" ["{}" [":click" ["on-back" "group-id"]]]]]
                                         ["comp-text" "|Go back" "nil"]]]],
                             "on-back" ["defn"
                                        "on-back"
                                        ["group-id"]
                                        ["fn"
                                         ["e" "dispatch!"]
                                         ["dispatch!" ":router/change" ["{}" [":name" ":group"] [":params" "group-id"]]]]]},
                      :procs []},
         "schema" {:ns ["ns" "woodenlist.schema"],
                   :defs {"configs" ["def" "configs" ["{}" [":storage-key" "|woodenlist-login"] [":port" "5021"]]]},
                   :procs []},
         "comp.speaker" {:ns ["ns"
                              "woodenlist.comp.speaker"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img" "button" "input"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                         :defs {"update-state" ["defn" "update-state" ["state" "text"] "text"],
                                "comp-speaker" ["def"
                                                "comp-speaker"
                                                ["create-comp"
                                                 ":speaker"
                                                 "init-state"
                                                 "update-state"
                                                 ["fn"
                                                  []
                                                  ["fn"
                                                   ["state" "mutate!"]
                                                   ["div"
                                                    ["{}"]
                                                    ["input"
                                                     ["{}"
                                                      [":attrs"
                                                       ["{}" [":value" "state"] [":placeholder" "|Message to leave..."]]]
                                                      [":event"
                                                       ["{}"
                                                        [":input" ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]]
                                                        [":keydown"
                                                         ["fn"
                                                          ["e" "dispatch!"]
                                                          ["if"
                                                           ["=" "13" [":key-code" "e"]]
                                                           ["do"
                                                            ["dispatch!" ":message/create" "state"]
                                                            ["mutate!" "|"]]]]]]]
                                                      [":style" ["merge" "ui/input" "style-input"]]]]
                                                    ["comp-space" "8" "nil"]
                                                    ["button"
                                                     ["{}"
                                                      [":style" "ui/button"]
                                                      [":event"
                                                       ["{}"
                                                        [":click"
                                                         ["fn"
                                                          ["e" "dispatch!"]
                                                          ["dispatch!" ":message/create" "state"]
                                                          ["mutate!" "|"]]]]]]
                                                     ["comp-text" "|Submit" "nil"]]]]]]],
                                "style-input" ["def" "style-input" ["{}" [":width" "400"]]],
                                "init-state" ["defn" "init-state" [] "|"]},
                         :procs []},
         "comp.container" {:ns ["ns"
                                "woodenlist.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo-ui.style" ":as" "ui"]
                                 ["[]" "respo-ui.style.colors" ":as" "colors"]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                 ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                 ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                 ["[]" "woodenlist.comp.header" ":refer" ["[]" "comp-header"]]
                                 ["[]" "woodenlist.comp.profile" ":refer" ["[]" "comp-profile"]]
                                 ["[]" "woodenlist.comp.login" ":refer" ["[]" "comp-login"]]
                                 ["[]" "respo-message.comp.msg-list" ":refer" ["[]" "comp-msg-list"]]
                                 ["[]" "woodenlist.comp.portal" ":refer" ["[]" "comp-portal"]]
                                 ["[]" "woodenlist.comp.group" ":refer" ["[]" "comp-group"]]
                                 ["[]" "woodenlist.comp.group-editor" ":refer" ["[]" "comp-group-editor"]]
                                 ["[]" "woodenlist.comp.task-editor" ":refer" ["[]" "comp-task-editor"]]
                                 ["[]" "woodenlist.comp.group-manager" ":refer" ["[]" "comp-group-manager"]]
                                 ["[]" "woodenlist.comp.person" ":refer" ["[]" "comp-person"]]
                                 ["[]" "woodenlist.comp.groups-view" ":refer" ["[]" "comp-groups-view"]]
                                 ["[]" "woodenlist.comp.people" ":refer" ["[]" "comp-people"]]
                                 ["[]" "woodenlist.comp.no-connection" ":refer" ["[]" "comp-no-connection"]]
                                 ["[]" "woodenlist.comp.avatar-editor" ":refer" ["[]" "comp-avatar-editor"]]
                                 ["[]" "woodenlist.comp.message-list" ":refer" ["[]" "comp-message-list"]]]],
                           :defs {"render" ["defn"
                                            "render"
                                            ["store"]
                                            ["fn"
                                             ["state" "mutate!"]
                                             ["if"
                                              ["nil?" "store"]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["merge" "ui/global" "ui/fullscreen" "ui/column" "style-container"]]]
                                               ["comp-no-connection"]]
                                              ["div"
                                               ["{}"
                                                [":style"
                                                 ["merge" "ui/global" "ui/fullscreen" "ui/column" "style-container"]]]
                                               ["comp-header"
                                                [":logged-in?" "store"]
                                                ["get-in" "store" ["[]" ":user" ":avatar"]]
                                                [":statistics" "store"]]
                                               ["div"
                                                ["{}" [":style" ["merge" "ui/fullscreen" "style-body"]]]
                                                ["comp-space" "nil" "80"]
                                                ["if"
                                                 [":logged-in?" "store"]
                                                 ["let"
                                                  [["router" [":router" "store"]]]
                                                  ["case"
                                                   [":name" "router"]
                                                   [":profile" ["comp-profile" [":user" "store"]]]
                                                   [":portal" ["comp-portal" [":data" "router"]]]
                                                   [":group"
                                                    ["comp-group"
                                                     [":data" "router"]
                                                     ["get-in" "store" ["[]" ":session" ":show-done?"]]]]
                                                   [":group-editor" ["comp-group-editor" [":data" "router"]]]
                                                   [":task-editor" ["comp-task-editor" [":data" "router"]]]
                                                   [":group-manager"
                                                    ["comp-group-manager" [":data" "router"] [":user" "store"]]]
                                                   [":person" ["comp-person" [":data" "router"]]]
                                                   [":groups" ["comp-groups-view" [":data" "router"]]]
                                                   [":people" ["comp-people" [":data" "router"]]]
                                                   [":edit-avatar"
                                                    ["comp-avatar-editor" ["get-in" "store" ["[]" ":user" ":avatar"]]]]
                                                   [":messages" ["comp-message-list" [":data" "router"]]]
                                                   ["div"
                                                    ["{}"]
                                                    ["comp-text" ["str" "|404 page: " ["pr-str" "router"]] "nil"]]]]
                                                 ["comp-login"]]
                                                ["comp-space" "nil" "120"]]
                                               ["--" "comp-debug" [":router" "store"] "style-debugger"]
                                               ["div"
                                                ["{}" [":style" ["{}" [":z-index" "9990"]]]]
                                                ["comp-msg-list"
                                                 ["get-in" "store" ["[]" ":session" ":notifications"]]
                                                 ":session/remove-notification"]]]]]],
                                  "comp-container" ["def" "comp-container" ["create-comp" ":container" "render"]],
                                  "style-container" ["def"
                                                     "style-container"
                                                     ["{}"
                                                      [":background-image"
                                                       ["str"
                                                        "|url(https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-440209.jpg)"]]
                                                      [":background-color" ":black"]
                                                      [":background-size" ":cover"]
                                                      [":color" "colors/paper"]]],
                                  "style-debugger" ["def"
                                                    "style-debugger"
                                                    ["{}" [":bottom" "0"] [":left" "0"] [":max-width" "|100%"]]],
                                  "style-body" ["def"
                                                "style-body"
                                                ["{}" [":overflow" ":auto"] [":padding" "|16px 200px"]]]},
                           :procs []},
         "comp.groups-view" {:ns ["ns"
                                  "woodenlist.comp.groups-view"
                                  [":require"
                                   ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                   ["[]" "respo-ui.style" ":as" "ui"]
                                   ["[]" "respo-ui.style.colors" ":as" "colors"]
                                   ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                   ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                   ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                   ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                             :defs {"style-group" ["def"
                                                   "style-group"
                                                   ["{}"
                                                    [":background-color" "colors/motif-dark"]
                                                    [":padding" "8"]
                                                    [":margin-right" "8"]
                                                    [":margin-bottom" "8"]]],
                                    "style-list" ["def" "style-list" ["{}" [":flex-wrap" ":wrap"]]],
                                    "comp-groups-view" ["def"
                                                        "comp-groups-view"
                                                        ["create-comp" ":groups-view" "render"]],
                                    "render" ["defn"
                                              "render"
                                              ["groups"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["div"
                                                ["{}"]
                                                ["div"
                                                 ["{}" [":style" "style-title"]]
                                                 ["comp-text" "|All Groups" "nil"]]
                                                ["comp-space" "nil" "16"]
                                                ["div"
                                                 ["{}" [":style" ["merge" "ui/row" "style-list"]]]
                                                 ["->>"
                                                  ["vals" "groups"]
                                                  ["map"
                                                   ["fn"
                                                    ["task-group"]
                                                    ["[]"
                                                     [":id" "task-group"]
                                                     ["div"
                                                      ["{}" [":style" "style-group"]]
                                                      ["comp-text" [":name" "task-group"] "nil"]]]]]]]]]],
                                    "style-title" ["def"
                                                   "style-title"
                                                   ["{}"
                                                    [":font-family" "|Josefin Sans"]
                                                    [":font-size" "20"]
                                                    [":font-weight" "100"]]]},
                             :procs []},
         "comp.avatar-editor" {:ns ["ns"
                                    "woodenlist.comp.avatar-editor"
                                    [":require"
                                     ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                     ["[]" "respo-ui.style" ":as" "ui"]
                                     ["[]" "respo-ui.style.colors" ":as" "colors"]
                                     ["[]"
                                      "respo.alias"
                                      ":refer"
                                      ["[]" "create-comp" "div" "span" "img" "button" "input"]]
                                     ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                     ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                     ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                               :defs {"style-url" ["def" "style-url" ["{}" [":width" "600"]]],
                                      "comp-avatar-editor" ["def"
                                                            "comp-avatar-editor"
                                                            ["create-comp"
                                                             ":avatar-editor"
                                                             "init-state"
                                                             "update-state"
                                                             ["fn"
                                                              ["avatar"]
                                                              ["fn"
                                                               ["state" "mutate!"]
                                                               ["div"
                                                                ["{}"]
                                                                ["div" ["{}"]]
                                                                ["div"
                                                                 ["{}"]
                                                                 ["input"
                                                                  ["{}"
                                                                   [":style" ["merge" "ui/input" "style-url"]]
                                                                   [":attrs"
                                                                    ["{}"
                                                                     [":value" "state"]
                                                                     [":placeholder" ["or" "avatar" "|URL for avatar"]]
                                                                     [":type" "|url"]]]
                                                                   [":event"
                                                                    ["{}"
                                                                     [":input"
                                                                      ["fn"
                                                                       ["e" "dispatch!"]
                                                                       ["mutate!" [":value" "e"]]]]]]]]
                                                                 ["comp-space" "8" "nil"]
                                                                 ["button"
                                                                  ["{}"
                                                                   [":style" "ui/button"]
                                                                   [":event"
                                                                    ["{}" [":click" ["on-submit" "state" "mutate!"]]]]]
                                                                  ["comp-text" "|Submit"]]]]]]]],
                                      "init-state" ["defn" "init-state" [] "|"],
                                      "on-submit" ["defn"
                                                   "on-submit"
                                                   ["url" "mutate!"]
                                                   ["fn"
                                                    ["e" "dispatch!"]
                                                    ["dispatch!" ":user/avatar" "url"]
                                                    ["mutate!" "|"]]],
                                      "update-state" ["defn" "update-state" ["state" "text"] "text"]},
                               :procs []},
         "main" {:ns ["ns"
                      "woodenlist.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!"]]
                       ["[]" "woodenlist.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "woodenlist.network" ":refer" ["[]" "send!" "setup-socket!"]]
                       ["[]" "woodenlist.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn" "dispatch!" ["op" "op-data"] ["send!" "op" "op-data"]],
                        "on-jsload!" ["defn"
                                      "on-jsload!"
                                      []
                                      ["clear-cache!"]
                                      ["render-app!"]
                                      ["println" "|code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["let"
                                        [["target" [".querySelector" "js/document" "|#app"]]]
                                        ["render!" ["comp-container" "@store-ref"] "target" "dispatch!" "states-ref"]]],
                        "-main" ["defn"
                                 "-main"
                                 []
                                 ["enable-console-print!"]
                                 ["render-app!"]
                                 ["setup-socket!"
                                  "store-ref"
                                  ["{}"
                                   [":url" ["str" "|ws://" [".-hostname" "js/location"] "|:5021"]]
                                   [":on-close!"
                                    ["fn"
                                     ["event"]
                                     ["reset!" "store-ref" "nil"]
                                     [".error" "js/console" "|Lost connection!"]]]
                                   [":on-open!"
                                    ["fn"
                                     ["event"]
                                     ["let"
                                      [["raw" [".getItem" "js/localStorage" [":storage-key" "schema/configs"]]]]
                                      ["if"
                                       ["some?" "raw"]
                                       ["do"
                                        ["println" "|Found login information:" "raw"]
                                        ["dispatch!" ":user/log-in" ["read-string" "raw"]]]]]]]]]
                                 ["add-watch" "store-ref" ":changes" "render-app!"]
                                 ["add-watch" "states-ref" ":changes" "render-app!"]
                                 ["println" "|app started!"]],
                        "store-ref" ["defonce" "store-ref" ["atom" "nil"]],
                        "states-ref" ["defonce" "states-ref" ["atom" ["{}"]]]},
                 :procs [["set!" "js/window.onload" "-main"]]},
         "network" {:ns ["ns"
                         "woodenlist.network"
                         [":require-macros" ["[]" "cljs.core.async.macros" ":refer" ["[]" "go"]]]
                         [":require"
                          ["[]" "cljs.reader" ":as" "reader"]
                          ["[]" "cljs.core.async" ":as" "a" ":refer" ["[]" ">!" "<!" "chan" "timeout"]]
                          ["[]" "recollect.patch" ":refer" ["[]" "patch-bunch"]]]],
                    :defs {"sender" ["defonce" "sender" ["chan"]],
                           "send!" ["defn" "send!" ["op" "op-data"] ["go" [">!" "sender" ["[]" "op" "op-data"]]]],
                           "setup-socket!" ["defn"
                                            "setup-socket!"
                                            ["store-ref" "configs"]
                                            ["let"
                                             [["ws-url" [":url" "configs"]]
                                              ["ws" ["js/WebSocket." "ws-url"]]
                                              ["handle-close!"
                                               ["if"
                                                ["fn?" [":on-close!" "configs"]]
                                                [":on-close!" "configs"]
                                                "identity"]]
                                              ["handle-open!"
                                               ["if" ["fn?" [":on-open!" "configs"]] [":on-open!" "configs"] "identity"]]]
                                             ["set!" "ws.onopen" ["fn" ["event"] ["handle-open!" "event"]]]
                                             ["set!" "ws.onclose" ["fn" ["event"] ["handle-close!" "event"]]]
                                             ["set!"
                                              "ws.onmessage"
                                              ["fn"
                                               ["event"]
                                               ["let"
                                                [["changes" ["reader/read-string" "event.data"]]]
                                                ["println" "|Changes" "changes"]
                                                ["reset!" "store-ref" ["patch-bunch" "@store-ref" "changes"]]]]]
                                             ["go" ["loop" ["[]"] [".send" "ws" ["pr-str" ["<!" "sender"]]] ["recur"]]]]]},
                    :procs []},
         "comp.login" {:ns ["ns"
                            "woodenlist.comp.login"
                            [":require"
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input" "button"]]
                             ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                             ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "woodenlist.schema" ":as" "schema"]]],
                       :defs {"update-state" ["defn" "update-state" ["state" "k" "v"] ["assoc" "state" "k" "v"]],
                              "on-toggle" ["defn"
                                           "on-toggle"
                                           ["mutate!" "signup?"]
                                           ["fn" ["e" "dispatch!"] ["mutate!" ":signup?" ["not" "signup?"]]]],
                              "on-submit" ["defn"
                                           "on-submit"
                                           ["username" "password" "signup?"]
                                           ["fn"
                                            ["e" "dispatch!"]
                                            ["do"
                                             ["dispatch!"
                                              ["if" "signup?" ":user/sign-up" ":user/log-in"]
                                              ["[]" "username" "password"]]
                                             [".setItem"
                                              "js/localStorage"
                                              [":storage-key" "schema/configs"]
                                              ["pr-str" ["[]" "username" "password"]]]]]],
                              "init-state" ["defn"
                                            "init-state"
                                            ["&" "args"]
                                            ["{}" [":signup?" "false"] [":username" "|"] [":password" "|"]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["mutate!" "k"]
                                          ["fn" ["e" "dispatch!"] ["mutate!" "k" [":value" "e"]]]],
                              "render" ["defn"
                                        "render"
                                        []
                                        ["fn"
                                         ["state" "mutate!"]
                                         ["div"
                                          ["{}" [":style" ["merge" "ui/flex" "ui/column"]]]
                                          ["div"
                                           ["{}"]
                                           ["comp-text" ["if" [":signup?" "state"] "|Sign up" "|Log in"] "style-title"]
                                           ["if"
                                            [":signup?" "state"]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|Want to log in?" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["div"
                                              ["{}"
                                               [":style" "ui/clickable-text"]
                                               [":event" ["{}" [":click" ["on-toggle" "mutate!" [":signup?" "state"]]]]]]
                                              ["comp-text" "|Log in" "nil"]]]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|No account yet?" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["div"
                                              ["{}"
                                               [":style" "ui/clickable-text"]
                                               [":event" ["{}" [":click" ["on-toggle" "mutate!" [":signup?" "state"]]]]]]
                                              ["comp-text" "|Sign up" "nil"]]]]]
                                          ["div"
                                           ["{}" [":style" ["{}"]]]
                                           ["div"
                                            ["{}"]
                                            ["input"
                                             ["{}"
                                              [":style" "ui/input"]
                                              [":attrs"
                                               ["{}" [":placeholder" "|Username"] [":value" [":username" "state"]]]]
                                              [":event" ["{}" [":input" ["on-input" "mutate!" ":username"]]]]]]]
                                           ["comp-space" "nil" "8"]
                                           ["div"
                                            ["{}"]
                                            ["input"
                                             ["{}"
                                              [":style" "ui/input"]
                                              [":attrs"
                                               ["{}" [":placeholder" "|Password"] [":value" [":password" "state"]]]]
                                              [":event" ["{}" [":input" ["on-input" "mutate!" ":password"]]]]]]]]
                                          ["comp-space" "nil" "8"]
                                          ["div"
                                           ["{}" [":style" "ui/flex"]]
                                           ["button"
                                            ["{}"
                                             [":style"
                                              ["merge" "ui/button" ["{}" [":outline" ":none"] [":border" ":none"]]]]
                                             [":event"
                                              ["{}"
                                               [":click"
                                                ["on-submit"
                                                 [":username" "state"]
                                                 [":password" "state"]
                                                 [":signup?" "state"]]]]]]
                                            ["comp-text" "|Submit" "nil"]]]
                                          ["--" "comp-debug" "state" "nil"]]]],
                              "comp-login" ["def"
                                            "comp-login"
                                            ["create-comp" ":login" "init-state" "update-state" "render"]],
                              "style-title" ["def"
                                             "style-title"
                                             ["{}"
                                              [":font-size" "24"]
                                              [":font-weight" "300"]
                                              [":font-family" "|Josefin Sans"]]]},
                       :procs []},
         "comp.message" {:ns ["ns"
                              "woodenlist.comp.message"
                              [":require"
                               ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                               ["[]" "respo-ui.style" ":as" "ui"]
                               ["[]" "respo-ui.style.colors" ":as" "colors"]
                               ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img"]]
                               ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                               ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                               ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                         :defs {"style-avatar" ["def"
                                                "style-avatar"
                                                ["{}"
                                                 [":width" "32"]
                                                 [":height" "32"]
                                                 [":border-radius" "|50%"]
                                                 [":background-size" "|cover"]]],
                                "comp-message" ["def"
                                                "comp-message"
                                                ["create-comp"
                                                 ":message"
                                                 ["fn"
                                                  ["message"]
                                                  ["fn"
                                                   ["state" "mutate!"]
                                                   ["div"
                                                    ["{}" [":style" ["merge" "ui/row" "style-message"]]]
                                                    ["div"
                                                     ["{}"
                                                      [":style"
                                                       ["merge"
                                                        "style-avatar"
                                                        ["{}"
                                                         [":background-image"
                                                          ["str"
                                                           "|url("
                                                           ["get-in" "message" ["[]" ":user" ":avatar"]]
                                                           "|)"]]]]]]]
                                                    ["comp-space" "8" "nil"]
                                                    ["comp-text" [":text" "message"] "nil"]]]]]],
                                "style-message" ["def" "style-message" ["{}" [":margin-bottom" "8"]]]},
                         :procs []},
         "comp.group" {:ns ["ns"
                            "woodenlist.comp.group"
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo-ui.style" ":as" "ui"]
                             ["[]" "respo-ui.style.colors" ":as" "colors"]
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                             ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                             ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                             ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                             ["[]" "woodenlist.comp.task-draft" ":refer" ["[]" "comp-task-draft"]]
                             ["[]" "woodenlist.comp.task" ":refer" ["[]" "comp-task"]]]],
                       :defs {"style-icon" ["def" "style-icon" ["{}" [":cursor" ":pointer"]]],
                              "on-toggle-hidden" ["defn"
                                                  "on-toggle-hidden"
                                                  ["group-id"]
                                                  ["fn"
                                                   ["e" "dispatch!"]
                                                   ["dispatch!" ":session/toggle-hidden" "group-id"]]],
                              "style-draft" ["def" "style-draft" ["{}"]],
                              "on-edit-group" ["defn"
                                               "on-edit-group"
                                               ["group-id"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["dispatch!"
                                                 ":router/change"
                                                 ["{}" [":name" ":group-editor"] [":params" "group-id"]]]]],
                              "style-list" ["def" "style-list" ["{}"]],
                              "style-container" ["def" "style-container" ["{}" [":width" "|100%"]]],
                              "style-empty" ["def"
                                             "style-empty"
                                             ["{}"
                                              [":font-size" "20"]
                                              [":font-weight" "100"]
                                              [":font-family" "|Josefin Sans"]
                                              [":color" "colors/texture-light"]]],
                              "comp-group" ["def" "comp-group" ["create-comp" ":group" "render"]],
                              "render" ["defn"
                                        "render"
                                        ["task-group" "show-done?"]
                                        ["fn"
                                         ["state" "mutate!"]
                                         ["div"
                                          ["{}" [":style" ["merge" "ui/row" "style-container"]]]
                                          ["div"
                                           ["{}" [":style" ["merge" "ui/flex" "style-list"]]]
                                           ["let"
                                            [["tasks" [":tasks" "task-group"]]
                                             ["done-tasks" [":done-tasks" "task-group"]]]
                                            ["div"
                                             ["{}"]
                                             ["div"
                                              ["{}" [":style" "style-draft"]]
                                              ["comp-task-draft" [":id" "task-group"]]]
                                             ["comp-space" "nil" "32"]
                                             ["if"
                                              ["empty?" "tasks"]
                                              ["div" ["{}" [":style" "style-empty"]] ["comp-text" "|No tasks" "nil"]]
                                              ["div"
                                               ["{}"]
                                               ["->>"
                                                ["vals" "tasks"]
                                                ["sort"
                                                 ["fn"
                                                  ["a" "b"]
                                                  ["compare" [":updated-time" "b"] [":updated-time" "a"]]]]
                                                ["map" ["fn" ["task"] ["[]" [":id" "task"] ["comp-task" "task"]]]]]]]
                                             ["comp-space" "nil" "32"]
                                             ["div"
                                              ["{}"]
                                              ["comp-text" "|Done tasks:" "nil"]
                                              ["comp-space" "8" "nil"]
                                              ["div"
                                               ["{}"
                                                [":style" "ui/clickable-text"]
                                                [":event" ["{}" [":click" ["on-toggle-hidden" [":id" "task-group"]]]]]]
                                               ["comp-text" "|Toggle" "nil"]]]
                                             ["if"
                                              ["empty?" "done-tasks"]
                                              ["div"
                                               ["{}" [":style" "style-empty"]]
                                               ["comp-text" ["if" "show-done?" "|No tasks" "|Hidden"] "nil"]]
                                              ["div"
                                               ["{}"]
                                               ["->>"
                                                ["vals" "done-tasks"]
                                                ["sort"
                                                 ["fn"
                                                  ["a" "b"]
                                                  ["compare" [":updated-time" "b"] [":updated-time" "a"]]]]
                                                ["map" ["fn" ["task"] ["[]" [":id" "task"] ["comp-task" "task"]]]]]]]]]]
                                          ["div"
                                           ["{}" [":style" "style-sidebar"]]
                                           ["div"
                                            ["{}" [":style" "style-name"]]
                                            ["comp-text" [":name" "task-group"] "nil"]
                                            ["comp-space" "8" "nil"]
                                            ["span"
                                             ["{}"
                                              [":attrs" ["{}" [":class-name" "|icon ion-md-create"]]]
                                              [":style" "style-icon"]
                                              [":event" ["{}" [":click" ["on-edit-group" [":id" "task-group"]]]]]]]
                                            ["comp-space" "8" "nil"]
                                            ["span"
                                             ["{}"
                                              [":attrs" ["{}" [":class-name" "|icon ion-md-people"]]]
                                              [":style" "style-icon"]
                                              [":event" ["{}" [":click" ["on-group-manage" [":id" "task-group"]]]]]]]]]]]],
                              "style-sidebar" ["def" "style-sidebar" ["{}" [":width" "320"]]],
                              "style-name" ["def"
                                            "style-name"
                                            ["{}"
                                             [":font-size" "24"]
                                             [":font-weight" "100"]
                                             [":font-family" "|Josefin Sans"]]],
                              "on-group-manage" ["defn"
                                                 "on-group-manage"
                                                 ["group-id"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["dispatch!"
                                                   ":router/change"
                                                   ["{}" [":name" ":group-manager"] [":params" "group-id"]]]]]},
                       :procs []},
         "comp.header" {:ns ["ns"
                             "woodenlist.comp.header"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                        :defs {"on-messages" ["defn"
                                              "on-messages"
                                              ["e" "dispatch!"]
                                              ["dispatch!"
                                               ":router/change"
                                               ["{}" [":name" ":messages"] [":params" "nil"]]]],
                               "on-profile" ["defn"
                                             "on-profile"
                                             ["e" "dispatch!"]
                                             ["dispatch!"
                                              ":router/change"
                                              ["{}" [":name" ":profile"] [":params" "nil"] [":router" "nil"]]]],
                               "style-header" ["def"
                                               "style-header"
                                               ["{}"
                                                [":height" "48"]
                                                [":width" "|100%"]
                                                [":justify-content" ":space-between"]
                                                [":padding" "|0 16px"]
                                                [":font-size" "16"]
                                                [":color" ":white"]
                                                [":position" ":absolute"]
                                                [":z-index" "100"]
                                                [":background-color" ["hsl" "0" "0" "0" "0.6"]]]],
                               "on-groups" ["defn"
                                            "on-groups"
                                            ["e" "dispatch!"]
                                            ["dispatch!" ":router/change" ["{}" [":name" ":groups"] [":params" "nil"]]]],
                               "on-home" ["defn"
                                          "on-home"
                                          ["e" "dispatch!"]
                                          ["dispatch!"
                                           ":router/change"
                                           ["{}" [":name" ":portal"] [":params" "nil"] [":router" "nil"]]]],
                               "style-smaller" ["def" "style-smaller" ["{}" [":font-size" "20"]]],
                               "style-logo" ["def"
                                             "style-logo"
                                             ["{}"
                                              [":cursor" "|pointer"]
                                              [":font-family" "|Josefin Sans"]
                                              [":font-size" "32"]
                                              [":font-weight" "100"]
                                              [":margin-right" "32"]]],
                               "render" ["defn"
                                         "render"
                                         ["logged-in?" "avatar" "statistics"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["div"
                                           ["{}" [":style" ["merge" "ui/row-center" "style-header"]]]
                                           ["div"
                                            ["{}" [":style" ["merge" "ui/row" ["{}" [":align-items" ":center"]]]]]
                                            ["div"
                                             ["{}" [":event" ["{}" [":click" "on-home"]]] [":style" "style-logo"]]
                                             ["comp-text" "|Woodenlist" "nil"]]
                                            ["div"
                                             ["{}"
                                              [":style" ["merge" "style-logo" "style-smaller"]]
                                              [":event" ["{}" [":click" "on-groups"]]]]
                                             ["comp-text" "|Groups" "nil"]]
                                            ["div"
                                             ["{}"
                                              [":style" ["merge" "style-logo" "style-smaller"]]
                                              [":event" ["{}" [":click" "on-people"]]]]
                                             ["comp-text"
                                              ["str"
                                               "|People("
                                               [":sessions-count" "statistics"]
                                               "|/"
                                               [":users-count" "statistics"]
                                               "|)"]
                                              "nil"]]
                                            ["div"
                                             ["{}"
                                              [":style" ["merge" "style-logo" "style-smaller"]]
                                              [":event" ["{}" [":click" "on-messages"]]]]
                                             ["comp-text" "|Messages" "nil"]]]
                                           ["if"
                                            "logged-in?"
                                            ["div"
                                             ["{}"
                                              [":style"
                                               ["merge"
                                                "style-avatar"
                                                ["{}" [":background-image" ["str" "|url(" "avatar" "|)"]]]]]
                                              [":event" ["{}" [":click" "on-profile"]]]]]
                                            ["div" ["{}" [":style" "style-pointer"]] ["comp-text" "|Guest" "nil"]]]]]],
                               "style-pointer" ["def" "style-pointer" ["{}" [":cursor" "|pointer"]]],
                               "style-avatar" ["def"
                                               "style-avatar"
                                               ["{}"
                                                [":width" "32"]
                                                [":height" "32"]
                                                [":border-radius" "|50%"]
                                                [":background-size" ":cover"]
                                                [":cursor" ":pointer"]]],
                               "comp-header" ["def" "comp-header" ["create-comp" ":header" "render"]],
                               "on-people" ["defn"
                                            "on-people"
                                            ["e" "dispatch!"]
                                            ["dispatch!" ":router/change" ["{}" [":name" ":people"] [":params" "nil"]]]]},
                        :procs []},
         "comp.person" {:ns ["ns"
                             "woodenlist.comp.person"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo-ui.style" ":as" "ui"]
                              ["[]" "respo-ui.style.colors" ":as" "colors"]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img" "input"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                              ["[]" "woodenlist.comp.group-card" ":refer" ["[]" "comp-group-card"]]]],
                        :defs {"render" ["defn"
                                         "render"
                                         ["router-data"]
                                         ["fn"
                                          ["state" "mutate!"]
                                          ["let"
                                           [["user" [":user" "router-data"]]]
                                           ["div"
                                            ["{}"]
                                            ["div"
                                             ["{}"]
                                             ["div"
                                              ["{}"
                                               [":style"
                                                ["merge"
                                                 "style-avatar"
                                                 ["{}" [":background-image" ["str" "|url(" [":avatar" "user"] "|)"]]]]]]]]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|Name:" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["comp-text" [":name" "user"] "nil"]]
                                            ["div"
                                             ["{}"]
                                             ["comp-text" "|Id:" "nil"]
                                             ["comp-space" "8" "nil"]
                                             ["input"
                                              ["{}" [":style" "ui/input"] [":attrs" ["{}" [":value" [":id" "user"]]]]]]]
                                            ["comp-space" "nil" "8"]
                                            ["div"
                                             ["{}" [":style" "ui/row"]]
                                             ["comp-text" "|Groups:" "nil"]
                                             ["comp-space" "16" "nil"]
                                             ["div"
                                              ["{}" [":style" "ui/row"]]
                                              ["->>"
                                               [":groups" "router-data"]
                                               ["map"
                                                ["fn"
                                                 ["entry"]
                                                 ["update"
                                                  "entry"
                                                  "1"
                                                  ["fn" ["task-group"] ["comp-group-card" "task-group"]]]]]]]]]]]],
                               "comp-person" ["def" "comp-person" ["create-comp" ":persion" "render"]],
                               "style-avatar" ["def"
                                               "style-avatar"
                                               ["{}"
                                                [":width" "80"]
                                                [":height" "80"]
                                                [":background-image" "colors/paper"]
                                                [":background-size" ":cover"]
                                                [":border-radius" "|50%"]]]},
                        :procs []},
         "comp.task-draft" {:ns ["ns"
                                 "woodenlist.comp.task-draft"
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "respo-ui.style" ":as" "ui"]
                                  ["[]" "respo-ui.style.colors" ":as" "colors"]
                                  ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input"]]
                                  ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]]],
                            :defs {"init-state" ["defn" "init-state" ["&" "args"] "|"],
                                   "update-state" ["defn" "update-state" ["state" "text"] "text"],
                                   "style-draft" ["def" "style-draft" ["{}" [":width" "400"]]],
                                   "on-keydown" ["defn"
                                                 "on-keydown"
                                                 ["mutate!" "text" "group-id"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["if"
                                                   ["=" "13" [":key-code" "e"]]
                                                   ["do"
                                                    ["mutate!" "|"]
                                                    ["dispatch!"
                                                     ":task/create"
                                                     ["{}" [":text" "text"] [":group-id" "group-id"]]]]]]],
                                   "on-input" ["defn"
                                               "on-input"
                                               ["mutate!"]
                                               ["fn" ["e" "dispach!"] ["mutate!" [":value" "e"]]]],
                                   "comp-task-draft" ["def"
                                                      "comp-task-draft"
                                                      ["create-comp" ":task-draft" "init-state" "update-state" "render"]],
                                   "render" ["defn"
                                             "render"
                                             ["group-id"]
                                             ["fn"
                                              ["state" "mutate!"]
                                              ["input"
                                               ["{}"
                                                [":style" ["merge" "ui/input" "style-draft"]]
                                                [":attrs" ["{}" [":value" "state"] [":placeholder" "|Add task"]]]
                                                [":event"
                                                 ["{}"
                                                  [":input" ["on-input" "mutate!"]]
                                                  [":keydown" ["on-keydown" "mutate!" "state" "group-id"]]]]]]]]},
                            :procs []},
         "comp.group-manager" {:ns ["ns"
                                    "woodenlist.comp.group-manager"
                                    [":require"
                                     ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                     ["[]" "clojure.string" ":as" "string"]
                                     ["[]" "respo-ui.style" ":as" "ui"]
                                     ["[]" "respo-ui.style.colors" ":as" "colors"]
                                     ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input" "button"]]
                                     ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                     ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                     ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                     ["[]" "woodenlist.comp.member-card" ":refer" ["[]" "comp-member-card"]]
                                     ["[]" "woodenlist.comp.back" ":refer" ["[]" "comp-back"]]]],
                               :defs {"on-input" ["defn"
                                                  "on-input"
                                                  ["mutate!"]
                                                  ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                      "update-state" ["defn" "update-state" ["state" "text"] "text"],
                                      "on-add-member" ["defn"
                                                       "on-add-member"
                                                       ["group-id" "user-id" "mutate!"]
                                                       ["fn"
                                                        ["e" "dispatch!"]
                                                        ["if"
                                                         ["not" ["string/blank?" "user-id"]]
                                                         ["do"
                                                          ["dispatch!"
                                                           ":task-group/add-member"
                                                           ["{}" [":group-id" "group-id"] [":user-id" "user-id"]]]
                                                          ["mutate!" "|"]]]]],
                                      "render-members" ["defn"
                                                        "render-members"
                                                        ["members" "admin?" "group-id" "user-id" "by-admin?"]
                                                        ["div"
                                                         ["{}" [":style" "ui/row"]]
                                                         ["->>"
                                                          ["vals" "members"]
                                                          ["map"
                                                           ["fn"
                                                            ["member"]
                                                            ["[]"
                                                             [":id" "member"]
                                                             ["comp-member-card"
                                                              "member"
                                                              "admin?"
                                                              "group-id"
                                                              "user-id"
                                                              "by-admin?"]]]]]]],
                                      "style-empty" ["def" "style-empty" ["{}" [":color" "colors/texture-light"]]],
                                      "init-state" ["defn" "init-state" ["&" "args"] "|"],
                                      "render-empty" ["defn"
                                                      "render-empty"
                                                      []
                                                      ["div"
                                                       ["{}" [":style" "style-empty"]]
                                                       ["comp-text" "|No users" "nil"]]],
                                      "render" ["defn"
                                                "render"
                                                ["task-group" "user"]
                                                ["fn"
                                                 ["state" "mutate!"]
                                                 ["let"
                                                  [["by-admin?"
                                                    ["contains?"
                                                     ["into" ["#{}"] ["keys" [":admins" "task-group"]]]
                                                     [":id" "user"]]]]
                                                  ["div"
                                                   ["{}"]
                                                   ["div"
                                                    ["{}"]
                                                    ["comp-text" "|Add user:"]
                                                    ["comp-space" "8" "nil"]
                                                    ["input"
                                                     ["{}"
                                                      [":attrs" ["{}" [":value" "state"] [":placeholder" "|User id"]]]
                                                      [":style" "ui/input"]
                                                      [":event" ["{}" [":input" ["on-input" "mutate!"]]]]]]
                                                    ["comp-space" "8" "nil"]
                                                    ["button"
                                                     ["{}"
                                                      [":style" "ui/button"]
                                                      [":event"
                                                       ["{}"
                                                        [":click"
                                                         ["on-add-member" [":id" "task-group"] "state" "mutate!"]]]]]
                                                     ["comp-text" "|Add" "nil"]]]
                                                   ["div"
                                                    ["{}"]
                                                    ["div" ["{}"] ["comp-text" "|Admins" "nil"]]
                                                    ["if"
                                                     ["empty?" [":admins" "task-group"]]
                                                     ["render-empty"]
                                                     ["render-members"
                                                      [":admins" "task-group"]
                                                      "true"
                                                      [":id" "task-group"]
                                                      [":id" "user"]
                                                      "by-admin?"]]]
                                                   ["div"
                                                    ["{}"]
                                                    ["div" ["{}"] ["comp-text" "|Members" "nil"]]
                                                    ["if"
                                                     ["empty?" [":users" "task-group"]]
                                                     ["render-empty"]
                                                     ["render-members"
                                                      [":users" "task-group"]
                                                      "false"
                                                      [":id" "task-group"]
                                                      [":id" "user"]
                                                      "by-admin?"]]]
                                                   ["comp-space" "nil" "120"]
                                                   ["comp-back" [":id" "task-group"]]]]]],
                                      "comp-group-manager" ["def"
                                                            "comp-group-manager"
                                                            ["create-comp"
                                                             ":group-manager"
                                                             "init-state"
                                                             "update-state"
                                                             "render"]]},
                               :procs []},
         "comp.no-connection" {:ns ["ns"
                                    "woodenlist.comp.no-connection"
                                    [":require"
                                     ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                     ["[]" "respo-ui.style" ":as" "ui"]
                                     ["[]" "respo-ui.style.colors" ":as" "colors"]
                                     ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "img"]]
                                     ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                     ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                     ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]]],
                               :defs {"render" ["defn"
                                                "render"
                                                []
                                                ["fn"
                                                 ["state" "mutate!"]
                                                 ["div"
                                                  ["{}"
                                                   [":style" ["merge" "ui/fullscreen" "ui/center" "style-container"]]]
                                                  ["comp-text" "|No connection." "nil"]]]],
                                      "comp-no-connection" ["def"
                                                            "comp-no-connection"
                                                            ["create-comp" ":no-connection" "render"]],
                                      "style-container" ["def"
                                                         "style-container"
                                                         ["{}"
                                                          [":font-family" "|Josefin Sans"]
                                                          [":font-size" "40"]
                                                          [":font-weight" "100"]]]},
                               :procs []},
         "comp.group-editor" {:ns ["ns"
                                   "woodenlist.comp.group-editor"
                                   [":require"
                                    ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                    ["[]" "clojure.string" ":as" "string"]
                                    ["[]" "respo-ui.style" ":as" "ui"]
                                    ["[]" "respo-ui.style.colors" ":as" "colors"]
                                    ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span" "input" "button"]]
                                    ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                    ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                    ["[]" "respo.comp.text" ":refer" ["[]" "comp-code" "comp-text"]]
                                    ["[]" "woodenlist.comp.back" ":refer" ["[]" "comp-back"]]]],
                              :defs {"on-input" ["defn"
                                                 "on-input"
                                                 ["mutate!"]
                                                 ["fn" ["e" "dispatch!"] ["mutate!" [":value" "e"]]]],
                                     "on-delete" ["defn"
                                                  "on-delete"
                                                  ["group-id"]
                                                  ["fn" ["e" "dispatch!"] ["dispatch!" ":task-group/delete" "group-id"]]],
                                     "init-state" ["defn" "init-state" ["&" "args"] "|"],
                                     "update-state" ["defn" "update-state" ["state" "text"] "text"],
                                     "render" ["defn"
                                               "render"
                                               ["task-group"]
                                               ["fn"
                                                ["state" "mutate!"]
                                                ["div"
                                                 ["{}"]
                                                 ["div" ["{}"] ["comp-text" [":name" "task-group"] "nil"]]
                                                 ["div"
                                                  ["{}"]
                                                  ["input"
                                                   ["{}"
                                                    [":style" "ui/input"]
                                                    [":attrs" ["{}" [":value" "state"] [":placeholder" "|Group name"]]]
                                                    [":event" ["{}" [":input" ["on-input" "mutate!"]]]]]]
                                                  ["comp-space" "8" "nil"]
                                                  ["button"
                                                   ["{}"
                                                    [":style" "ui/button"]
                                                    [":event"
                                                     ["{}"
                                                      [":click" ["on-rename" [":id" "task-group"] "state" "mutate!"]]]]]
                                                   ["comp-text" "|Submit" "nil"]]]
                                                 ["comp-space" "nil" "120"]
                                                 ["div"
                                                  ["{}"]
                                                  ["comp-text" "|Delete the whole group!"]
                                                  ["comp-space" "8" "nil"]
                                                  ["button"
                                                   ["{}"
                                                    [":style"
                                                     ["merge"
                                                      "ui/button"
                                                      ["{}" [":background-color" "colors/irreversible"]]]]
                                                    [":event" ["{}" [":click" ["on-delete" [":id" "task-group"]]]]]]
                                                   ["comp-text" "|Delete" "nil"]]]
                                                 ["comp-space" "nil" "16"]
                                                 ["comp-back" [":id" "task-group"]]]]],
                                     "comp-group-editor" ["def"
                                                          "comp-group-editor"
                                                          ["create-comp"
                                                           ":group-editor"
                                                           "init-state"
                                                           "update-state"
                                                           "render"]],
                                     "on-rename" ["defn"
                                                  "on-rename"
                                                  ["group-id" "state" "mutate!"]
                                                  ["fn"
                                                   ["e" "dispatch!"]
                                                   ["if"
                                                    ["not" ["string/blank?" "state"]]
                                                    ["do"
                                                     ["dispatch!"
                                                      ":task-group/rename"
                                                      ["{}" [":id" "group-id"] [":text" "state"]]]
                                                     ["mutate!" "|"]]]]]},
                              :procs []}}}
